// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AdminCreatePublisherData, AdminCreatePublisherResponse, AdminListPublishersData, AdminListPublishersResponse, AdminCreateSchoolData, AdminCreateSchoolResponse, AdminListSchoolsData, AdminListSchoolsResponse, AdminListTeachersData, AdminListTeachersResponse, AdminListStudentsData, AdminListStudentsResponse, AdminBulkImportPublishersData, AdminBulkImportPublishersResponse, AdminBulkImportTeachersData, AdminBulkImportTeachersResponse, AdminBulkImportStudentsData, AdminBulkImportStudentsResponse, LoginLoginAccessTokenData, LoginLoginAccessTokenResponse, LoginTestTokenResponse, LoginRecoverPasswordData, LoginRecoverPasswordResponse, LoginResetPasswordData, LoginResetPasswordResponse, LoginRecoverPasswordHtmlContentData, LoginRecoverPasswordHtmlContentResponse, PrivateCreateUserData, PrivateCreateUserResponse, PublishersListMySchoolsResponse, PublishersCreateTeacherData, PublishersCreateTeacherResponse, TeachersListMyStudentsResponse, TeachersCreateStudentData, TeachersCreateStudentResponse, TeachersBulkImportStudentsData, TeachersBulkImportStudentsResponse, UsersReadUsersData, UsersReadUsersResponse, UsersCreateUserData, UsersCreateUserResponse, UsersReadUserMeResponse, UsersDeleteUserMeResponse, UsersUpdateUserMeData, UsersUpdateUserMeResponse, UsersUpdatePasswordMeData, UsersUpdatePasswordMeResponse, UsersRegisterUserData, UsersRegisterUserResponse, UsersReadUserByIdData, UsersReadUserByIdResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserData, UsersDeleteUserResponse, UtilsTestEmailData, UtilsTestEmailResponse, UtilsHealthCheckResponse } from './types.gen';

export class AdminService {
    /**
     * Create new publisher
     * Creates a new publisher user and Publisher record. Admin only.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserCreationResponse Successful Response
     * @throws ApiError
     */
    public static createPublisher(data: AdminCreatePublisherData): CancelablePromise<AdminCreatePublisherResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/publishers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List all publishers
     * Retrieve all publishers with pagination. Admin only.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns PublisherPublic Successful Response
     * @throws ApiError
     */
    public static listPublishers(data: AdminListPublishersData = {}): CancelablePromise<AdminListPublishersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/publishers',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create new school
     * Creates a new school linked to a publisher. Admin only.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns SchoolPublic Successful Response
     * @throws ApiError
     */
    public static createSchool(data: AdminCreateSchoolData): CancelablePromise<AdminCreateSchoolResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/schools',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List all schools
     * Retrieve all schools with optional publisher filter. Admin only.
     * @param data The data for the request.
     * @param data.publisherId
     * @param data.skip
     * @param data.limit
     * @returns SchoolPublic Successful Response
     * @throws ApiError
     */
    public static listSchools(data: AdminListSchoolsData = {}): CancelablePromise<AdminListSchoolsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/schools',
            query: {
                publisher_id: data.publisherId,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List all teachers
     * Retrieve all teachers with optional school filter. Admin only.
     * @param data The data for the request.
     * @param data.schoolId
     * @param data.skip
     * @param data.limit
     * @returns TeacherPublic Successful Response
     * @throws ApiError
     */
    public static listTeachers(data: AdminListTeachersData = {}): CancelablePromise<AdminListTeachersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/teachers',
            query: {
                school_id: data.schoolId,
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * List all students
     * Retrieve all students with pagination. Admin only.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns StudentPublic Successful Response
     * @throws ApiError
     */
    public static listStudents(data: AdminListStudentsData = {}): CancelablePromise<AdminListStudentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/admin/students',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk import publishers from Excel
     * Upload Excel file to create multiple publisher accounts. Admin only.
     * @param data The data for the request.
     * @param data.formData
     * @returns BulkImportResponse Successful Response
     * @throws ApiError
     */
    public static bulkImportPublishers(data: AdminBulkImportPublishersData): CancelablePromise<AdminBulkImportPublishersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/bulk-import/publishers',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk import teachers from Excel
     * Upload Excel file to create multiple teacher accounts. Admin only.
     * @param data The data for the request.
     * @param data.formData
     * @returns BulkImportResponse Successful Response
     * @throws ApiError
     */
    public static bulkImportTeachers(data: AdminBulkImportTeachersData): CancelablePromise<AdminBulkImportTeachersResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/bulk-import/teachers',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk import students from Excel
     * Upload Excel file to create multiple student accounts. Admin only.
     * @param data The data for the request.
     * @param data.formData
     * @returns BulkImportResponse Successful Response
     * @throws ApiError
     */
    public static bulkImportStudents(data: AdminBulkImportStudentsData): CancelablePromise<AdminBulkImportStudentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/admin/bulk-import/students',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class LoginService {
    /**
     * Login Access Token
     * OAuth2 compatible token login, get an access token for future requests
     * @param data The data for the request.
     * @param data.formData
     * @returns Token Successful Response
     * @throws ApiError
     */
    public static loginAccessToken(data: LoginLoginAccessTokenData): CancelablePromise<LoginLoginAccessTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/access-token',
            formData: data.formData,
            mediaType: 'application/x-www-form-urlencoded',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Test Token
     * Test access token
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static testToken(): CancelablePromise<LoginTestTokenResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/login/test-token'
        });
    }
    
    /**
     * Recover Password
     * Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static recoverPassword(data: LoginRecoverPasswordData): CancelablePromise<LoginRecoverPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Reset Password
     * Reset password
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static resetPassword(data: LoginResetPasswordData): CancelablePromise<LoginResetPasswordResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/reset-password/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Recover Password Html Content
     * HTML Content for Password Recovery
     * @param data The data for the request.
     * @param data.email
     * @returns string Successful Response
     * @throws ApiError
     */
    public static recoverPasswordHtmlContent(data: LoginRecoverPasswordHtmlContentData): CancelablePromise<LoginRecoverPasswordHtmlContentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/password-recovery-html-content/{email}',
            path: {
                email: data.email
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class PrivateService {
    /**
     * Create User
     * Create a new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: PrivateCreateUserData): CancelablePromise<PrivateCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/private/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class PublishersService {
    /**
     * List my schools
     * Retrieve schools assigned to authenticated publisher. Publisher only.
     * @returns SchoolPublic Successful Response
     * @throws ApiError
     */
    public static listMySchools(): CancelablePromise<PublishersListMySchoolsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/publishers/me/schools'
        });
    }
    
    /**
     * Create new teacher
     * Creates a new teacher user linked to publisher's school. Publisher only.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserCreationResponse Successful Response
     * @throws ApiError
     */
    public static createTeacher(data: PublishersCreateTeacherData): CancelablePromise<PublishersCreateTeacherResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/publishers/me/teachers',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class TeachersService {
    /**
     * List my students
     * Retrieve students enrolled in authenticated teacher's classes. Teacher only.
     * @returns StudentPublic Successful Response
     * @throws ApiError
     */
    public static listMyStudents(): CancelablePromise<TeachersListMyStudentsResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/teachers/me/students'
        });
    }
    
    /**
     * Create new student
     * Creates a new student user. Teacher only.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserCreationResponse Successful Response
     * @throws ApiError
     */
    public static createStudent(data: TeachersCreateStudentData): CancelablePromise<TeachersCreateStudentResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/teachers/me/students',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Bulk import students from Excel
     * Upload Excel file to create multiple student accounts. Teacher only.
     * @param data The data for the request.
     * @param data.formData
     * @returns BulkImportResponse Successful Response
     * @throws ApiError
     */
    public static bulkImportStudents(data: TeachersBulkImportStudentsData): CancelablePromise<TeachersBulkImportStudentsResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/teachers/me/students/bulk-import',
            formData: data.formData,
            mediaType: 'multipart/form-data',
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UsersService {
    /**
     * Read Users
     * Retrieve users.
     * @param data The data for the request.
     * @param data.skip
     * @param data.limit
     * @returns UsersPublic Successful Response
     * @throws ApiError
     */
    public static readUsers(data: UsersReadUsersData = {}): CancelablePromise<UsersReadUsersResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/',
            query: {
                skip: data.skip,
                limit: data.limit
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create User
     * Create new user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static createUser(data: UsersCreateUserData): CancelablePromise<UsersCreateUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User Me
     * Get current user.
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Delete User Me
     * Delete own user.
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/me'
        });
    }
    
    /**
     * Update User Me
     * Update own user.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUserMe(data: UsersUpdateUserMeData): CancelablePromise<UsersUpdateUserMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Password Me
     * Update own password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static updatePasswordMe(data: UsersUpdatePasswordMeData): CancelablePromise<UsersUpdatePasswordMeResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/me/password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Register User
     * Create new user without the need to be logged in.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static registerUser(data: UsersRegisterUserData): CancelablePromise<UsersRegisterUserResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/users/signup',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read User By Id
     * Get a specific user by id.
     * @param data The data for the request.
     * @param data.userId
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static readUserById(data: UsersReadUserByIdData): CancelablePromise<UsersReadUserByIdResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update User
     * Update a user.
     * @param data The data for the request.
     * @param data.userId
     * @param data.requestBody
     * @returns UserPublic Successful Response
     * @throws ApiError
     */
    public static updateUser(data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete User
     * Delete a user.
     * @param data The data for the request.
     * @param data.userId
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static deleteUser(data: UsersDeleteUserData): CancelablePromise<UsersDeleteUserResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/api/v1/users/{user_id}',
            path: {
                user_id: data.userId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
}

export class UtilsService {
    /**
     * Test Email
     * Test emails.
     * @param data The data for the request.
     * @param data.emailTo
     * @returns Message Successful Response
     * @throws ApiError
     */
    public static testEmail(data: UtilsTestEmailData): CancelablePromise<UtilsTestEmailResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/api/v1/utils/test-email/',
            query: {
                email_to: data.emailTo
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Health Check
     * @returns boolean Successful Response
     * @throws ApiError
     */
    public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/api/v1/utils/health-check/'
        });
    }
}