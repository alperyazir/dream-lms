// This file is auto-generated by @hey-api/openapi-ts

export const Body_admin_bulk_import_publishersSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_admin-bulk_import_publishers'
} as const;

export const Body_admin_bulk_import_studentsSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_admin-bulk_import_students'
} as const;

export const Body_admin_bulk_import_teachersSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_admin-bulk_import_teachers'
} as const;

export const Body_login_login_access_tokenSchema = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: '^password$'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            format: 'password',
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_login-login_access_token'
} as const;

export const Body_teachers_bulk_import_studentsSchema = {
    properties: {
        file: {
            type: 'string',
            format: 'binary',
            title: 'File'
        }
    },
    type: 'object',
    required: ['file'],
    title: 'Body_teachers-bulk_import_students'
} as const;

export const BulkImportErrorDetailSchema = {
    properties: {
        row_number: {
            type: 'integer',
            title: 'Row Number'
        },
        field: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Field'
        },
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['row_number', 'message'],
    title: 'BulkImportErrorDetail',
    description: 'Details of a single bulk import validation error'
} as const;

export const BulkImportResponseSchema = {
    properties: {
        success: {
            type: 'boolean',
            title: 'Success'
        },
        total_rows: {
            type: 'integer',
            title: 'Total Rows'
        },
        created_count: {
            type: 'integer',
            title: 'Created Count'
        },
        error_count: {
            type: 'integer',
            title: 'Error Count'
        },
        errors: {
            items: {
                '$ref': '#/components/schemas/BulkImportErrorDetail'
            },
            type: 'array',
            title: 'Errors'
        },
        credentials: {
            anyOf: [
                {
                    items: {
                        additionalProperties: {
                            type: 'string'
                        },
                        type: 'object'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Credentials'
        }
    },
    type: 'object',
    required: ['success', 'total_rows', 'created_count', 'error_count', 'errors'],
    title: 'BulkImportResponse',
    description: 'Response schema for bulk import endpoints'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const MessageSchema = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        }
    },
    type: 'object',
    required: ['message'],
    title: 'Message'
} as const;

export const NewPasswordSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['token', 'new_password'],
    title: 'NewPassword'
} as const;

export const PrivateUserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        full_name: {
            type: 'string',
            title: 'Full Name'
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        }
    },
    type: 'object',
    required: ['email', 'password', 'full_name'],
    title: 'PrivateUserCreate'
} as const;

export const PublisherCreateAPISchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        contact_email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Contact Email'
        },
        user_email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'User Email'
        },
        full_name: {
            type: 'string',
            maxLength: 255,
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['name', 'contact_email', 'user_email', 'full_name'],
    title: 'PublisherCreateAPI',
    description: 'Properties for API endpoint publisher creation (includes user creation)'
} as const;

export const PublisherPublicSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        contact_email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contact Email'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['name', 'id', 'user_id', 'created_at', 'updated_at'],
    title: 'PublisherPublic',
    description: 'Properties to return via API'
} as const;

export const SchoolCreateSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        address: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address'
        },
        contact_info: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contact Info'
        },
        publisher_id: {
            type: 'string',
            format: 'uuid',
            title: 'Publisher Id'
        }
    },
    type: 'object',
    required: ['name', 'publisher_id'],
    title: 'SchoolCreate',
    description: 'Properties to receive via API on School creation'
} as const;

export const SchoolPublicSchema = {
    properties: {
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name'
        },
        address: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Address'
        },
        contact_info: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Contact Info'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        publisher_id: {
            type: 'string',
            format: 'uuid',
            title: 'Publisher Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['name', 'id', 'publisher_id', 'created_at', 'updated_at'],
    title: 'SchoolPublic',
    description: 'Properties to return via API'
} as const;

export const StudentCreateAPISchema = {
    properties: {
        user_email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'User Email'
        },
        full_name: {
            type: 'string',
            maxLength: 255,
            title: 'Full Name'
        },
        grade_level: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 50
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grade Level'
        },
        parent_email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Email'
        }
    },
    type: 'object',
    required: ['user_email', 'full_name'],
    title: 'StudentCreateAPI',
    description: 'Properties for API endpoint student creation (includes user creation)'
} as const;

export const StudentPublicSchema = {
    properties: {
        grade_level: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 50
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grade Level'
        },
        parent_email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Parent Email'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'user_id', 'created_at', 'updated_at'],
    title: 'StudentPublic',
    description: 'Properties to return via API'
} as const;

export const TeacherCreateAPISchema = {
    properties: {
        user_email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'User Email'
        },
        full_name: {
            type: 'string',
            maxLength: 255,
            title: 'Full Name'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        },
        subject_specialization: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subject Specialization'
        }
    },
    type: 'object',
    required: ['user_email', 'full_name', 'school_id'],
    title: 'TeacherCreateAPI',
    description: 'Properties for API endpoint teacher creation (includes user creation)'
} as const;

export const TeacherPublicSchema = {
    properties: {
        subject_specialization: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Subject Specialization'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        user_id: {
            type: 'string',
            format: 'uuid',
            title: 'User Id'
        },
        school_id: {
            type: 'string',
            format: 'uuid',
            title: 'School Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        }
    },
    type: 'object',
    required: ['id', 'user_id', 'school_id', 'created_at', 'updated_at'],
    title: 'TeacherPublic',
    description: 'Properties to return via API'
} as const;

export const TokenSchema = {
    properties: {
        access_token: {
            type: 'string',
            title: 'Access Token'
        },
        token_type: {
            type: 'string',
            title: 'Token Type',
            default: 'bearer'
        }
    },
    type: 'object',
    required: ['access_token'],
    title: 'Token'
} as const;

export const UpdatePasswordSchema = {
    properties: {
        current_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Current Password'
        },
        new_password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'New Password'
        }
    },
    type: 'object',
    required: ['current_password', 'new_password'],
    title: 'UpdatePassword'
} as const;

export const UserCreateSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        role: {
            '$ref': '#/components/schemas/UserRole',
            default: 'student'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const UserCreationResponseSchema = {
    properties: {
        user: {
            '$ref': '#/components/schemas/UserPublic'
        },
        temp_password: {
            type: 'string',
            title: 'Temp Password'
        },
        role_record: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/PublisherPublic'
                },
                {
                    '$ref': '#/components/schemas/TeacherPublic'
                },
                {
                    '$ref': '#/components/schemas/StudentPublic'
                }
            ],
            title: 'Role Record'
        }
    },
    type: 'object',
    required: ['user', 'temp_password', 'role_record'],
    title: 'UserCreationResponse',
    description: 'Response schema for role-specific user creation endpoints'
} as const;

export const UserPublicSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        role: {
            '$ref': '#/components/schemas/UserRole',
            default: 'student'
        },
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['email', 'id'],
    title: 'UserPublic'
} as const;

export const UserRegisterSchema = {
    properties: {
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            maxLength: 40,
            minLength: 8,
            title: 'Password'
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserRegister'
} as const;

export const UserRoleSchema = {
    type: 'string',
    enum: ['admin', 'publisher', 'teacher', 'student'],
    title: 'UserRole',
    description: 'User role enumeration for RBAC'
} as const;

export const UserUpdateSchema = {
    properties: {
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        role: {
            '$ref': '#/components/schemas/UserRole',
            default: 'student'
        },
        password: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 40,
                    minLength: 8
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const UserUpdateMeSchema = {
    properties: {
        full_name: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Full Name'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255,
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        }
    },
    type: 'object',
    title: 'UserUpdateMe'
} as const;

export const UsersPublicSchema = {
    properties: {
        data: {
            items: {
                '$ref': '#/components/schemas/UserPublic'
            },
            type: 'array',
            title: 'Data'
        },
        count: {
            type: 'integer',
            title: 'Count'
        }
    },
    type: 'object',
    required: ['data', 'count'],
    title: 'UsersPublic'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;