// This file is auto-generated by @hey-api/openapi-ts

export type Body_admin_bulk_import_publishers = {
    file: (Blob | File);
};

export type Body_admin_bulk_import_students = {
    file: (Blob | File);
};

export type Body_admin_bulk_import_teachers = {
    file: (Blob | File);
};

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type Body_teachers_bulk_import_students = {
    file: (Blob | File);
};

/**
 * Details of a single bulk import validation error
 */
export type BulkImportErrorDetail = {
    row_number: number;
    field?: (string | null);
    message: string;
};

/**
 * Response schema for bulk import endpoints
 */
export type BulkImportResponse = {
    success: boolean;
    total_rows: number;
    created_count: number;
    error_count: number;
    errors: Array<BulkImportErrorDetail>;
    credentials?: (Array<{
    [key: string]: (string);
}> | null);
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Message = {
    message: string;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

/**
 * Properties for API endpoint publisher creation (includes user creation)
 */
export type PublisherCreateAPI = {
    name: string;
    contact_email: string;
    user_email: string;
    full_name: string;
};

/**
 * Properties to return via API
 */
export type PublisherPublic = {
    name: string;
    contact_email?: (string | null);
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Properties to receive via API on School creation
 */
export type SchoolCreate = {
    name: string;
    address?: (string | null);
    contact_info?: (string | null);
    publisher_id: string;
};

/**
 * Properties to return via API
 */
export type SchoolPublic = {
    name: string;
    address?: (string | null);
    contact_info?: (string | null);
    id: string;
    publisher_id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Properties for API endpoint student creation (includes user creation)
 */
export type StudentCreateAPI = {
    user_email: string;
    full_name: string;
    grade_level?: (string | null);
    parent_email?: (string | null);
};

/**
 * Properties to return via API
 */
export type StudentPublic = {
    grade_level?: (string | null);
    parent_email?: (string | null);
    id: string;
    user_id: string;
    created_at: string;
    updated_at: string;
};

/**
 * Properties for API endpoint teacher creation (includes user creation)
 */
export type TeacherCreateAPI = {
    user_email: string;
    full_name: string;
    school_id: string;
    subject_specialization?: (string | null);
};

/**
 * Properties to return via API
 */
export type TeacherPublic = {
    subject_specialization?: (string | null);
    id: string;
    user_id: string;
    school_id: string;
    created_at: string;
    updated_at: string;
};

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    role?: UserRole;
    password: string;
};

/**
 * Response schema for role-specific user creation endpoints
 */
export type UserCreationResponse = {
    user: UserPublic;
    temp_password: string;
    role_record: (PublisherPublic | TeacherPublic | StudentPublic);
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    role?: UserRole;
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

/**
 * User role enumeration for RBAC
 */
export type UserRole = 'admin' | 'publisher' | 'teacher' | 'student';

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    role?: UserRole;
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type AdminCreatePublisherData = {
    requestBody: PublisherCreateAPI;
};

export type AdminCreatePublisherResponse = (UserCreationResponse);

export type AdminListPublishersData = {
    limit?: number;
    skip?: number;
};

export type AdminListPublishersResponse = (Array<PublisherPublic>);

export type AdminCreateSchoolData = {
    requestBody: SchoolCreate;
};

export type AdminCreateSchoolResponse = (SchoolPublic);

export type AdminListSchoolsData = {
    limit?: number;
    publisherId?: (string | null);
    skip?: number;
};

export type AdminListSchoolsResponse = (Array<SchoolPublic>);

export type AdminListTeachersData = {
    limit?: number;
    schoolId?: (string | null);
    skip?: number;
};

export type AdminListTeachersResponse = (Array<TeacherPublic>);

export type AdminListStudentsData = {
    limit?: number;
    skip?: number;
};

export type AdminListStudentsResponse = (Array<StudentPublic>);

export type AdminBulkImportPublishersData = {
    formData: Body_admin_bulk_import_publishers;
};

export type AdminBulkImportPublishersResponse = (BulkImportResponse);

export type AdminBulkImportTeachersData = {
    formData: Body_admin_bulk_import_teachers;
};

export type AdminBulkImportTeachersResponse = (BulkImportResponse);

export type AdminBulkImportStudentsData = {
    formData: Body_admin_bulk_import_students;
};

export type AdminBulkImportStudentsResponse = (BulkImportResponse);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type PublishersListMySchoolsResponse = (Array<SchoolPublic>);

export type PublishersCreateTeacherData = {
    requestBody: TeacherCreateAPI;
};

export type PublishersCreateTeacherResponse = (UserCreationResponse);

export type TeachersListMyStudentsResponse = (Array<StudentPublic>);

export type TeachersCreateStudentData = {
    requestBody: StudentCreateAPI;
};

export type TeachersCreateStudentResponse = (UserCreationResponse);

export type TeachersBulkImportStudentsData = {
    formData: Body_teachers_bulk_import_students;
};

export type TeachersBulkImportStudentsResponse = (BulkImportResponse);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);